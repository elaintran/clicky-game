{"version":3,"sources":["components/Nav/index.js","components/Suite/Spade/index.js","components/Suite/Clover/index.js","components/Suite/Heart/index.js","components/Suite/Diamond/index.js","components/Card/index.js","components/GameModal/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","round","score","onClick","show","Spade","Clover","Heart","Diamond","checkSuite","suite","Suite_Spade","Suite_Clover","Suite_Diamond","Suite_Heart","Card","click","id","style","color","number","GameModal","Modal_default","size","aria-labelledby","centered","onHide","close","Header","Title","title","Body","message","Game","state","cards","modalTitle","modalMessage","shuffle","arr","i","length","newIndex","Math","floor","random","arrValue","handleScore","clickedCard","_this","filter","clicked","resetGame","setState","map","showModal","console","log","hideModal","this","_this2","components_Nav","card","components_Card","key","components_GameModal","React","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bedc8007.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Nav(props) {\r\n    return (\r\n        <div className=\"nav\">\r\n            <div className=\"round nav-item\">\r\n                <h3 className=\"m-0\"><span className=\"nav-title\">Round</span>{props.round}</h3>\r\n            </div>\r\n            <div className=\"score nav-item\">\r\n                <h3 className=\"m-0\"><span className=\"nav-title\">Score</span>{props.score}</h3>\r\n            </div>\r\n            <i className=\"fas fa-info-circle\" onClick={() => props.show()}></i>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Spade() {\r\n    return (\r\n        <div className=\"spade\">\r\n            <i className=\"fas fa-heart rotated-heart\"></i>\r\n            <div className=\"stem\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spade;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Clover() {\r\n    return (\r\n        <div className=\"clover\">\r\n            <div className=\"top-circle circle\"></div>\r\n            <div className=\"left-circle circle\"></div>\r\n            <div className=\"right-circle circle\"></div>\r\n            <div className=\"stem\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clover;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Heart() {\r\n    return <i className=\"fas fa-heart heart\"></i>;\r\n}\r\n\r\nexport default Heart;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Diamond() {\r\n    return (\r\n        <div className=\"diamond\">\r\n            <div className=\"diamond-shape\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Diamond;","import React from \"react\";\r\nimport Spade from \"../Suite/Spade/index.js\";\r\nimport Clover from \"../Suite/Clover/index.js\";\r\nimport Heart from \"../Suite/Heart/index.js\";\r\nimport Diamond from \"../Suite/Diamond/index.js\";\r\nimport \"./style.css\";\r\n\r\nconst checkSuite = (suite) => {\r\n    if (suite === \"Spade\") {\r\n        return <Spade />;\r\n    } else if (suite === \"Clover\") {\r\n        return <Clover />;\r\n    } else if (suite === \"Diamond\") {\r\n        return <Diamond />;\r\n    } else if (suite === \"Heart\") {\r\n        return <Heart />;\r\n    }\r\n}\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card\" onClick={() => props.click(props.id)}>\r\n            <h3 className=\"card-number\" style={{color: props.color}}>{props.number}</h3>\r\n            <div className=\"card-suite\">\r\n                {checkSuite(props.suite)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport \"./style.css\";\r\n\r\nfunction GameModal(props) {\r\n    return (\r\n        <div>\r\n            <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered show={props.show} onHide={() => props.close()}>\r\n                <Modal.Header>\r\n                    <Modal.Title>{props.title}</Modal.Title>\r\n                    <i className=\"fas fa-times\" onClick={() => props.close()}></i>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h5>{props.message}</h5>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameModal;","import React from \"react\";\r\nimport Nav from \"../Nav/index.js\";\r\nimport Card from \"../Card/index.js\";\r\nimport GameModal from \"../GameModal/index.js\";\r\nimport cards from \"../../cards.json\";\r\nimport \"./style.css\";\r\n\r\nclass Game extends React.Component {\r\n    state = {\r\n        round: 1,\r\n        score: 0,\r\n        cards: cards,\r\n        modalTitle: \"Test Your Memory\",\r\n        modalMessage: `Advance through rounds by clicking on\r\ncards, but make sure you donâ€™t\r\nselect the same card twice!`,\r\n        show: true\r\n    }\r\n\r\n    //run functions when page loads\r\n    componentDidMount() {\r\n        //add click property to all card objects and set clicked as false\r\n        this.state.cards.map(cards => cards.clicked = false);\r\n        //shuffle cards\r\n        this.shuffle(this.state.cards);\r\n        //update set with new cards\r\n        this.setState({ cards: this.state.cards });\r\n    }\r\n\r\n    //modern ver of fisher-yates shuffle algorithm\r\n    shuffle = (arr) => {\r\n        //start at the last index and end at first\r\n        for (let i = arr.length - 1; i > 0; i--) {\r\n            //generate a random index\r\n            let newIndex = Math.floor(Math.random() * (i + 1));\r\n            //store value of current arr in variable\r\n            let arrValue = arr[i];\r\n            //swap the value of the current arr with the new value\r\n            arr[i] = arr[newIndex];\r\n            //the new value is assigned to the old position\r\n            arr[newIndex] = arrValue;\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    handleScore = (id) => {\r\n        //find the card obj by id\r\n        let clickedCard = this.state.cards.filter(cards => cards.id === id);\r\n        //if card has not been clicked yet\r\n        if (clickedCard[0].clicked !== true) {\r\n            //if clicked all cards once\r\n            if (this.state.round === this.state.cards.length) {\r\n                //you win, reset game\r\n                this.resetGame(\"You Win!\", \"Congratulations! Keep that winning streak going and play another round!\");\r\n            //continue game\r\n            } else {\r\n                //switched to clicked\r\n                clickedCard[0].clicked = true;\r\n                //update state with new values\r\n                this.setState({\r\n                    round: this.state.round + 1,\r\n                    score: this.state.score + 100,\r\n                    cards: this.state.cards\r\n                });\r\n            }\r\n        //if clicked on card already clicked\r\n        } else {\r\n            //you lose, reset game\r\n            this.resetGame(\"You Lose!\", \"But don't lose hope! Keep trying and remember not to click on the same card!\");\r\n        }\r\n        //shuffle cards every round\r\n        this.shuffle(this.state.cards);\r\n    }\r\n\r\n    resetGame = (title, message) => {\r\n        this.shuffle(this.state.cards);\r\n        this.state.cards.map(cards => cards.clicked = false);\r\n        this.setState({\r\n            round: 1,\r\n            score: 0,\r\n            cards: this.state.cards,\r\n            modalTitle: title,\r\n            modalMessage: message,\r\n            show: true\r\n        });\r\n    }\r\n\r\n    //opens modal\r\n    showModal = () => {\r\n        console.log(\"clicked\");\r\n        this.setState({ show: true });\r\n    }\r\n\r\n    //resets modal info when closed\r\n    hideModal = () => {\r\n        this.setState({\r\n            show: false,\r\n            modalTitle: \"Test Your Memory\",\r\n            modalMessage: `Advance through rounds by clicking on\r\ncards, but make sure you donâ€™t\r\nselect the same card twice!`,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Nav round={this.state.round} message={this.state.message} score={this.state.score} show={this.showModal} />\r\n                <div className=\"gameboard\">\r\n                    {this.state.cards.map(card => (\r\n                        <Card key={card.id} id={card.id} number={card.number} suite={card.suite} color={card.color} click={this.handleScore}/>\r\n                    ))}\r\n                </div>\r\n                <GameModal show={this.state.show} close={this.hideModal} title={this.state.modalTitle} message={this.state.modalMessage}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Game;","import React from \"react\";\nimport Game from \"./components/Game/index.js\";\nimport \"./styles/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}